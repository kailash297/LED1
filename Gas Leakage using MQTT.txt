###############################################################################################################################
This tutorial instructions are focused more on how Gas sensor transmits message through MQTT, and is not intended for Commercial or Residential purpose. Adopt Gas safety habits when attempting to test Gas sensor. Safe learning! 
###############################################################################################################################

Bill of Material (Items needed)
1 X Wemos Mini D1 (V3.0.0)
1 X Raspberry Pi3 (9.9 Stretch Version)
1 X Windows 10 64-bit O/S x64-based Processor (for Arduino configuration)
1 X Micro-USB to USB Cable
1 X MQ2 Gas Sensor
1 X Cigarette Lighter (for testing LPG leakage) 

Step1: MQTT Server setup in RaspberryPi3 under root user.
 sudo apt-get update
 sudo apt-get upgrade
 sudo apt-get install mosquitto -y
 sudo apt-get install mosquitto-clients y
Perform MQTT testing between Server and Client within RPi3 itself.
Login into your router and perform Address reservation against the RPi3.

Step2: Setting up Wemos in Windows 10
Connect the Micro USB end to Wemos and USB end to the Windows 10 Machine.
Ensure that Wemos's in-built Blue LED light flickers when it is powered by the USB cable.
Using Device Manager > Ports (COM & LPT), verify whether USB-SERIAL CH340 is displayed as COM5
Switch off the AntiVirus and Firewall when sketch is verified / uploaded.

Step3: Arduino Configuration
Install Arduino IDE (ver 1.8.9) from Arduino Web portal https://www.arduino.cc/en/Main/Software.
Under File/Preferences, in Settings Tab, update 'Additional Boards Manager URL' as http://arduino.esp8266.com/stable/package_esp8266com_index.json
Under Tools/Board, using Boards Manager, install 'esp8266' to install ESP8266 Board Package.
Under Tools/Board, select the Board as 'LOLIN(WEMOS) D1 R2 & mini' under ESP8266 Boards 2.5.0 (as on 10-May-2019)
Upload Speed: 115200, CPU Freq: 80 MHz, Flash Size: 4M (1M SPIFFS), Debug Port: Serial, Debug Level: Core, Port: COM5, Programmer: Arduion as ISP
Do not panic, if Tools > Board Info displays BN: Unkown Board VID: 1A86 PID: 7523 SN: Upload any sketch to obtain it. This should still work.

Step4: Wemos Mini D1 Testing
Verify Arduino environment is error free by executing example sketch through File > Examples > 01.Basics > Blink
Upon upload, the inbuilt Blue LED will flicker every 1 second.
To stop/reset above example Arduino upload the below code:
 void setup() {}
 void loop() {}

Step5: The Gas sensor normally should be up by 20 seconds. Sometimes it needs to be preheated over 24 hrs or 48 hrs. Check the datasheet. 
Using a Mini Breadboard, Connect the MQ2 Sensor Pins with ESP8266 Sensor Pins as following:
Gas Sensor	ESP8266
A0		A0
GND		GND
VCC		5v5
D0		NC (Not Connected)

Step6: MQTT Sketch in Wemos
Under Tools/Library Manager, install 'PubSubClient' ver 2.7.0
Under File>Examples>PubSubClient, use mqtt_esp8266 sketch for reference.
Finally, use below sketch to publish the topic 'kitchen/lpg' for every five seconds.
After updating SSID, Password and mqtt_server details, upload the sketch.

Step7: Raw code for publishing ppm in Wemos Mini D1

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <stdio.h> 

// Update these with values suitable for your network.

const char* ssid = "-----";
const char* password = "------";
const char* mqtt_server = "192.168.0.100";

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int SensorString = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("kitchen/lpg", "LPG Sensor using ESP8266 is online now.");
      // ... and resubscribe
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
//  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(9600); // sets the serial port to 9600
  Serial.println("Gas sensor warming up!");
  delay(20000); // allow the MQ-2 to warm up
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

    if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  long now = millis();
  if (now - lastMsg > 5000) {
    lastMsg = now;
    
    float senValue = analogRead(A0);
    char senString[20];
    dtostrf(senValue, 7, 2, senString);
    Serial.print("Sensor Value: ");
    Serial.println(senString);
    client.publish("kitchen/lpg", senString);
   }
}

Step8: Maria DB Installation
Install MariaDB in Raspberry Pi3 and this will create 'root' user by default.
Create a new database named 'iot_db'
Create a new table named 'esp32_wemos' with columns titled dateandtime, sensor and ppm.
Create a new user named 'db_user' and assign sufficient grants and privileges.
Create a new flow using node red which will take the input the gas ppm level from ESP8266 and store the value in the table if the ppm value is more than 100. Below is the raw code.

[{"id":"31e7d1c1.12c7ae","type":"function","z":"92532e5c.45cb1","name":"query","func":"var newMsg = {\"topic\": \"INSERT INTO esp32_wemos(dateandtime, sensor, ppm) VALUES (now(), 'Wemos Mini D1', \" + msg.payload + \")\"\n}\nreturn newMsg;\n","outputs":1,"noerr":0,"x":410,"y":180,"wires":[["e6d64d35.02acb"]]},{"id":"e6d64d35.02acb","type":"mysql","z":"92532e5c.45cb1","mydb":"6677f625.8a51b8","name":"Maria","x":550,"y":180,"wires":[["2b0e2e0a.947fa2"]]},{"id":"2b0e2e0a.947fa2","type":"debug","z":"92532e5c.45cb1","name":"","active":true,"tosidebar":true,"console":true,"tostatus":true,"complete":"true","targetType":"full","x":690,"y":180,"wires":[]},{"id":"fcdc9d03.e2a54","type":"mqtt in","z":"92532e5c.45cb1","name":"Gas","topic":"kitchen/lpg","qos":"2","datatype":"auto","broker":"c8a3953a.a672c8","x":90,"y":180,"wires":[["ecf089c1.925488","bfb6f7bd.7cc258"]]},{"id":"ecf089c1.925488","type":"switch","z":"92532e5c.45cb1","name":"ppm","property":"payload","propertyType":"msg","rules":[{"t":"gte","v":"100","vt":"num"}],"checkall":"true","repair":false,"outputs":1,"x":250,"y":180,"wires":[["31e7d1c1.12c7ae","d33c3e5c.88004"]]},{"id":"d33c3e5c.88004","type":"debug","z":"92532e5c.45cb1","name":"","active":true,"tosidebar":true,"console":true,"tostatus":true,"complete":"payload","targetType":"msg","x":420,"y":100,"wires":[]},{"id":"bfb6f7bd.7cc258","type":"debug","z":"92532e5c.45cb1","name":"","active":true,"tosidebar":true,"console":true,"tostatus":true,"complete":"payload","targetType":"msg","x":270,"y":260,"wires":[]},{"id":"989e2534.d0fcb8","type":"comment","z":"92532e5c.45cb1","name":"ESP8266","info":"","x":100,"y":140,"wires":[]},{"id":"700c66c5.60fc28","type":"comment","z":"92532e5c.45cb1","name":"Raspberry Pi3","info":"","x":570,"y":140,"wires":[]},{"id":"6677f625.8a51b8","type":"MySQLdatabase","z":"","host":"127.0.0.1","port":"3306","db":"iot_db","tz":""},{"id":"c8a3953a.a672c8","type":"mqtt-broker","z":"","name":"Mosquitto","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]

Step9: Final Showdown
Start your Home W-Fi and switch on Rpi3, so that MQTT Server is started.
Client1: Using Rpi3, subscribe for the topic 'kitchen/lpg'
Client2: Install 'MyMQTT' app from Google Playstore and under settings, give the MQTT Server ip address and subscribe for the topic 'kitchen/lpg'.
Plug the assembled board to any power source.
Now bring a Gas lighter near the Gas Sensor and slowly release the gas, enough not to ignite.
The pmm will suddenly surge above 300 ppm till 1024 ppm. Wemos Mini D1 publishes ppm values and using MQTT, the same is subscribed through Rpi3 as well as in Android phone. 
Also this value would be stored in the Maria Database.

Conditions: Rpi3, Wemos+MQ2 and Android phone - All three are connected to same Network (It can be  your Home Wifi or your Smart Phone Mobile hotspot).
